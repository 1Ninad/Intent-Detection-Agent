# Multi-stage build for Next.js frontend
FROM node:18-alpine AS deps

WORKDIR /app

# Copy package files
COPY services/frontend/package.json services/frontend/package-lock.json* ./

# Install dependencies
RUN npm install --production=false

# Builder stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy frontend code
COPY services/frontend/app ./app
COPY services/frontend/lib ./lib
COPY services/frontend/package.json services/frontend/package-lock.json* ./
COPY services/frontend/next.config.mjs services/frontend/tsconfig.json ./
COPY services/frontend/tailwind.config.ts services/frontend/postcss.config.mjs ./
COPY services/frontend/.eslintrc.json ./.eslintrc.json

# Build arguments for API URL
ARG NEXT_PUBLIC_API_BASE_URL
ENV NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS runner

WORKDIR /app

ENV NODE_ENV=production

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"

CMD ["node", "server.js"]
